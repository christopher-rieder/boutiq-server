BEGIN TRANSACTION;
DROP TABLE IF EXISTS "FACTURA";
CREATE TABLE IF NOT EXISTS "FACTURA" (
	"id"	INTEGER NOT NULL,
	"NUMERO_FACTURA"	INTEGER NOT NULL,
	"FECHA_HORA"	INTEGER NOT NULL,
	"CLIENTE_ID"	INTEGER,
	"TURNO_ID"	INTEGER,
	"DESCUENTO"	NUMERIC,
	"ANULADA"	NUMERIC,
	CONSTRAINT "PK_FACTURA" PRIMARY KEY("id"),
	CONSTRAINT "UK_NUMERO_FACTURA" UNIQUE("NUMERO_FACTURA"),
	CONSTRAINT "FK_TURNO" FOREIGN KEY("TURNO_ID") REFERENCES "TURNO"("id"),
	CONSTRAINT "FK_CLIENTE" FOREIGN KEY("CLIENTE_ID") REFERENCES "CLIENTE"("id")
);
DROP TABLE IF EXISTS "ITEM_FACTURA";
CREATE TABLE IF NOT EXISTS "ITEM_FACTURA" (
	"id"	INTEGER NOT NULL,
	"FACTURA_ID"	INTEGER,
	"CANTIDAD"	INTEGER NOT NULL DEFAULT 1,
	"PRECIO_UNITARIO"	REAL NOT NULL,
	"DESCUENTO"	INTEGER NOT NULL DEFAULT 0,
	CONSTRAINT "PK_ITEM_FACTURA" PRIMARY KEY("id"),
	CONSTRAINT "FK_FACTURA" FOREIGN KEY("FACTURA_ID") REFERENCES "FACTURA"("id")
);
DROP TABLE IF EXISTS "PROVEEDOR";
CREATE TABLE IF NOT EXISTS "PROVEEDOR" (
	"id"	INTEGER NOT NULL,
	"NOMBRE"	TEXT NOT NULL,
	CONSTRAINT "PK_PROVEEDOR" PRIMARY KEY("id"),
	CONSTRAINT "UK_NOMBRE" UNIQUE("NOMBRE")
);
DROP TABLE IF EXISTS "MOVIMIENTO_CAJA";
CREATE TABLE IF NOT EXISTS "MOVIMIENTO_CAJA" (
	"id"	INTEGER NOT NULL,
	"MONTO"	REAL NOT NULL DEFAULT 0,
	"DESCRIPCION"	TEXT NOT NULL,
	"TURNO_ID"	INTEGER,
	CONSTRAINT "PK_EGRESO_CAJA" PRIMARY KEY("id"),
	CONSTRAINT "CK_MONTO_NO_CERO" CHECK(cantidad!=0),
	CONSTRAINT "FK_TURNO" FOREIGN KEY("TURNO_ID") REFERENCES "TURNO"("id")
);
DROP TABLE IF EXISTS "ITEM_SENIA";
CREATE TABLE IF NOT EXISTS "ITEM_SENIA" (
	"SENIA_ID"	INTEGER NOT NULL,
	"ARTICULO_ID"	INTEGER NOT NULL,
	"CANTIDAD"	INTEGER NOT NULL DEFAULT 1,
	CONSTRAINT "CK_CANTIDAD_POSITIVA_ITEM_SENIA" CHECK(cantidad>0),
	CONSTRAINT "PK_ITEM_SENIA" PRIMARY KEY("SENIA_ID","ARTICULO_ID"),
	CONSTRAINT "FK_SENIA" FOREIGN KEY("SENIA_ID") REFERENCES "SENIA"("id"),
	CONSTRAINT "FK_ARTICULO" FOREIGN KEY("ARTICULO_ID") REFERENCES "ARTICULO"("id")
);
DROP TABLE IF EXISTS "SENIA";
CREATE TABLE IF NOT EXISTS "SENIA" (
	"id"	INTEGER NOT NULL,
	"MONTO"	REAL NOT NULL DEFAULT 0,
	"FECHA_HORA"	INTEGER NOT NULL,
	"ESTADO"	TEXT,
	"CLIENTE_ID"	INTEGER,
	CONSTRAINT "PK_SENIA" PRIMARY KEY("id"),
	CONSTRAINT "CK_CANTIDAD_POSITIVA_MONTO_SENIA" CHECK(cantidad>0),
	CONSTRAINT "FK_CLIENTE" FOREIGN KEY("CLIENTE_ID") REFERENCES "CLIENTE"("id")
);
DROP TABLE IF EXISTS "ITEM_MISC";
CREATE TABLE IF NOT EXISTS "ITEM_MISC" (
	"id"	INTEGER NOT NULL,
	"PRECIO"	INTEGER NOT NULL DEFAULT 0,
	"DESCRIPCION"	TEXT NOT NULL,
	"FACTURA_ID"	INTEGER,
	CONSTRAINT "PK_ITEM_MISC" PRIMARY KEY("id"),
	CONSTRAINT "FK_FACTURA" FOREIGN KEY("FACTURA_ID") REFERENCES "FACTURA"("id")
);
DROP TABLE IF EXISTS "RETIRO_ITEM";
CREATE TABLE IF NOT EXISTS "RETIRO_ITEM" (
	"id"	INTEGER NOT NULL,
	"CANTIDAD"	INTEGER NOT NULL DEFAULT 1,
	"DETALLE"	TEXT NOT NULL,
	"FECHA_HORA"	INTEGER NOT NULL,
	"ESTADO"	TEXT NOT NULL,
	CONSTRAINT "PK_RETIRO_ITEM" PRIMARY KEY("id"),
	CONSTRAINT "CK_CANTIDAD_POSITIVA_RETIRO_ITEM" CHECK(cantidad>0)
);
DROP TABLE IF EXISTS "TURNO";
CREATE TABLE IF NOT EXISTS "TURNO" (
	"id"	INTEGER NOT NULL,
	"FECHA_HORA_INICIO"	INTEGER NOT NULL,
	"FECHA_HORA_CIERRE"	INTEGER,
	"VENDEDOR_ID"	INTEGER,
	CONSTRAINT "PK_TURNO" PRIMARY KEY("id"),
	CONSTRAINT "FK_VENDEDOR" FOREIGN KEY("VENDEDOR_ID") REFERENCES "VENDEDOR"("id")
);
DROP TABLE IF EXISTS "ITEM_COMPRA";
CREATE TABLE IF NOT EXISTS "ITEM_COMPRA" (
	"COMPRA_ID"	INTEGER NOT NULL,
	"ARTICULO_ID"	INTEGER NOT NULL,
	"CANTIDAD"	INTEGER NOT NULL DEFAULT 1,
	CONSTRAINT "PK_ITEM_COMPRA" PRIMARY KEY("COMPRA_ID","ARTICULO_ID"),
	CONSTRAINT "FK_COMPRA" FOREIGN KEY("COMPRA_ID") REFERENCES "COMPRA"("id"),
	CONSTRAINT "FK_ARTICULO" FOREIGN KEY("ARTICULO_ID") REFERENCES "ARTICULO"("id"),
	CONSTRAINT "CK_CANTIDAD_POSITIVA_CANTIDAD" CHECK(cantidad>0)
);
DROP TABLE IF EXISTS "COMPRA";
CREATE TABLE IF NOT EXISTS "COMPRA" (
	"id"	INTEGER NOT NULL,
	"FECHA_HORA"	INTEGER NOT NULL,
	"PROVEEDOR_ID"	INTEGER,
	CONSTRAINT "PK_COMPRA" PRIMARY KEY("id"),
	CONSTRAINT "FK_PROVEEDOR" FOREIGN KEY("PROVEEDOR_ID") REFERENCES "PROVEEDOR"("id")
);
DROP TABLE IF EXISTS "VENDEDOR";
CREATE TABLE IF NOT EXISTS "VENDEDOR" (
	"id"	INTEGER NOT NULL,
	"NOMBRE"	TEXT UNIQUE NOT NULL,
	"PASS"	TEXT,
	CONSTRAINT "PK_VENDEDOR" PRIMARY KEY("id")
);
DROP TABLE IF EXISTS "CLIENTE";
CREATE TABLE IF NOT EXISTS "CLIENTE" (
	"id"	INTEGER NOT NULL,
	"NOMBRE"	TEXT NOT NULL,
	"DOMICILIO"	TEXT,
	"TELEFONO"	INTEGER NOT NULL,
	"CREDITO"	REAL NOT NULL DEFAULT 0,
	CONSTRAINT "PK_CLIENTE" PRIMARY KEY("id")
);
DROP TABLE IF EXISTS "RUBRO";
CREATE TABLE IF NOT EXISTS "RUBRO" (
	"id"	INTEGER NOT NULL,
	"NOMBRE"	TEXT NOT NULL,
	CONSTRAINT "PK_RUBRO" PRIMARY KEY("id"),
	CONSTRAINT "UK_RUBRO" UNIQUE("NOMBRE")
);
DROP TABLE IF EXISTS "MARCA";
CREATE TABLE IF NOT EXISTS "MARCA" (
	"id"	INTEGER NOT NULL,
	"NOMBRE"	TEXT NOT NULL,
	CONSTRAINT "PK_MARCA" PRIMARY KEY("id"),
	CONSTRAINT "UK_MARCA" UNIQUE("NOMBRE")
);
DROP TABLE IF EXISTS "ARTICULO";
CREATE TABLE IF NOT EXISTS "ARTICULO" (
	"id"	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	"CODIGO"	TEXT NOT NULL,
	"DESCRIPCION"	TEXT NOT NULL,
	"PRECIO_LISTA"	REAL NOT NULL,
	"PRECIO_CONTADO"	REAL,
	"PRECIO_COSTO"	REAL,
	"STOCK"	INTEGER NOT NULL DEFAULT 0,
	"RUBRO_ID"	INTEGER,
	"MARCA_ID"	INTEGER,
	"PROMO_BOOL"	INTEGER NOT NULL DEFAULT 0,
	"PRECIO_PROMO"	REAL,
	CONSTRAINT "CK_PRECIO_LISTA_POSITIVO" CHECK(precio_lista>0),
	CONSTRAINT "CK_PRECIO_CONTADO_POSITIVO" CHECK(precio_contado>0),
	CONSTRAINT "CK_PRECIO_COSTO_POSITIVO" CHECK(precio_costo>0),
	CONSTRAINT "CK_PRECIO_PROMO_POSITIVO" CHECK(precio_promo>0),
	CONSTRAINT "UK_CODIGO" UNIQUE("CODIGO"),
	CONSTRAINT "FK_MARCA" FOREIGN KEY("MARCA_ID") REFERENCES "MARCA"("id"),
	CONSTRAINT "FK_RUBRO" FOREIGN KEY("RUBRO_ID") REFERENCES "RUBRO"("id")
);
DROP VIEW IF EXISTS "FULL_ARTICULOS";
CREATE VIEW FULL_ARTICULOS AS SELECT ARTICULO.id AS id, ARTICULO.CODIGO, ARTICULO.DESCRIPCION, ARTICULO.PRECIO_LISTA, ARTICULO.PRECIO_CONTADO, ARTICULO.PRECIO_COSTO, ARTICULO.STOCK, RUBRO.NOMBRE AS RUBRO, MARCA.NOMBRE AS MARCA, ARTICULO.PROMO_BOOL, ARTICULO.PRECIO_PROMO FROM ARTICULO INNER JOIN MARCA ON ARTICULO.MARCA_ID = MARCA.id INNER JOIN RUBRO ON ARTICULO.RUBRO_ID = RUBRO.id;
COMMIT;
